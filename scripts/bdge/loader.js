/* * Badly Designed Game Engine * Copyright (c) 2010, Michael Kelly <Osmose1000@gmail.com> *  * Permission to use, copy, modify, and/or distribute this software for any * purpose with or without fee is hereby granted, provided that the above * copyright notice and this permission notice appear in all copies. *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. *//** * Manages loading resources */define(["require", "exports", "module",    "./audio",    "./util"],function(require, exports, module,    audio,    util) {// For better readabilityvar loader = exports;    var resources = {};var resourceCount = 0;var resourcesLoaded = 0;/** * True when every resource is loaded, false otherwise */exports.loadingComplete = true;/** * Returns the data of a loaded resource (e.g. an image object, font name, or * audio object). */exports.getData = function(id) {    if (typeof resources[id] != "object") {            throw new Error("No resource with id '" + id + "' found!");    }        return resources[id].data;};/** * Adds a resource to the loader. Note that resources are not loaded until * the load() method is called! */exports.addResource = function(id, url, type) {    if (resources[id] != undefined) {        throw new Error("Resource with id '" + id + "' already exists!");    }        resources[id] = {        url: url,        type: type,        loaded: false,        data: null    };        if (type != "font") { // No onload for fonts :(        resourceCount++;    }    this.loadingComplete = false;};/** * Loads all resources that have yet to be loaded. Sets loadingComplete to true * when all added resources have been loaded. */exports.load = function() {    var res;    util.forEach(resources, function(id, res) {        switch (res.type) {            case "image":                res.data = new Image();                res.data.onload = function() {                    resourcesLoaded++;                    if (resourcesLoaded == resourceCount) {                        loader.loadingComplete = true;                    }                };                res.data.src = res.url;                break;            case "font":                // Load by appending style tag to head                res.styleTag = document.createElement("style");                res.styleTag.innerHTML =                    "@font-face {" +                    "   font-family: " + id + ";" +                    "   src: url('" + res.url + "');" +                    "}";                var head = document.getElementsByTagName("head")[0];                head.appendChild(res.styleTag);                                // Value returned by getData should be font family                res.data = id;                break;            case "sound":                res.data = new audio.Sound();                res.data.load(res.url, function() {                    resourcesLoaded++;                    if (resourcesLoaded == resourceCount) {                        loader.loadingComplete = true;                    }                });        }    });};});